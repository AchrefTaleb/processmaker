# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    resource_class: xlarge
    docker:
      # specify the version you desire here
      - image: circleci/php:7.2.8-fpm-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/mysql:5.7-ram
        environment:
          - MYSQL_ROOT_PASSWORD: P4ssW0rd1!
          - MYSQL_DATABASE: circle_test

      # Add support for Microsoft SQL Server Testing
      - image: microsoft/mssql-server-linux:2017-GA
        environment:
          # Needed for MS SQL Docker install
          - ACCEPT_EULA: 'Y'
          - SA_PASSWORD: 'P4ssW0rd1!'

    working_directory: ~/repo

    steps:
      - run:
          name: Set Build Name Environment Variable
          # Set BUILD_NAME environment variable to a filesystem friendly name and store it in our bash environment
          command: |
            echo 'export BUILD_NAME=$(echo "$CIRCLE_BRANCH" | tr /. -)' >> $BASH_ENV
            echo 'export QA_DB_NAME=$(echo "processmaker$CIRCLE_BRANCH" | tr -d /.-)' >> $BASH_ENV
            echo 'export QA_DATA_DB_NAME=$(echo "processmaker_data$CIRCLE_BRANCH" | tr -d /.-)' >> $BASH_ENV
            source $BASH_ENV

      - run:
          name: QA Host SSH Host Identifier Import
          command: |
            mkdir ~/.ssh
            echo $BUILDBOT_HOST_IDENTIFIER >> ~/.ssh/known_hosts
            echo $QA_PROCESSMAKERBUILDS_HOST_IDENTIFIER	>> ~/.ssh/known_hosts
            chmod 0600 ~/.ssh/known_hosts

      - checkout

      # Install PHP dependencies
      - run: sudo apt-get update && sudo apt install -y libpng-dev libzip-dev default-libmysqlclient-dev curl apt-transport-https
      - run: sudo docker-php-ext-install gd zip pdo_mysql mysqli
      - run: sudo apt-get install -y libfreetype6-dev libjpeg62-turbo-dev libpng-dev
      - run: sudo docker-php-ext-install -j$(nproc) iconv
      - run: sudo docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
      - run: sudo docker-php-ext-install -j$(nproc) gd
      - run: sudo docker-php-ext-install -j$(nproc) pcntl
      - run: sudo docker-php-ext-install -j$(nproc) exif

      # Install MS SQL PDO Extension dependency
      - run:
          name: 'MS SQL Extension Installation'
          command: |
            sudo curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
            sudo sh  -c 'curl https://packages.microsoft.com/config/debian/8/prod.list > /etc/apt/sources.list.d/mssql-release.list'
            sudo apt-get install -y locales
            sudo sh -c 'echo "en_US.UTF-8 UTF-8" > /etc/locale.gen'
            sudo locale-gen
            sudo apt-get update
            sudo ACCEPT_EULA=Y apt-get install msodbcsql
            sudo apt-get install unixodbc-dev
            sudo pecl install sqlsrv
            sudo pecl install pdo_sqlsrv
            sudo docker-php-ext-enable sqlsrv pdo_sqlsrv

      # Install old libssl-1.0.0 due to ODBC13 issue. See: https://github.com/Microsoft/msphpsql/issues/484
      - run:
          name: 'ODBC13 libssl workaround'
          command: |
            echo "deb http://deb.debian.org/debian jessie main" | sudo tee -a /etc/apt/sources.list
            sudo apt-get update
            sudo apt-get install libssl1.0.0

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - restore_cache:
          keys:
            - v1-npm-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-npm-dependencies-

      - run: composer install -n --prefer-dist

      - run: sudo npm install -g npm@6.4.1 && npm ci

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      # Enable xdebug to support code coverage
      #- run: sudo docker-php-ext-enable xdebug

      - setup_remote_docker

      - run:
          name: setup SDKs
          command: |
            php artisan l5:generate
            mkdir -p /tmp/processmaker-sdk-php
            php artisan processmaker:sdk php /tmp/processmaker-sdk-php

            mkdir -p /tmp/processmaker-sdk-node
            php artisan processmaker:sdk javascript /tmp/processmaker-sdk-node

            mkdir -p /tmp/processmaker-sdk-lua
            php artisan processmaker:sdk lua /tmp/processmaker-sdk-lua

      - run:
          name: Configure scripts executor
          command: |
            docker pull processmaker4/executor-php:latest
            docker pull processmaker4/executor-lua:latest
            docker pull processmaker4/executor-node:latest
            docker pull jbergknoff/sass:latest
            sudo mkdir -m777 /opt/executor

      #- run: sudo docker-php-ext-enable xdebug

      # Build frontend assets for production
      - run:
          name: 'Front-End Asset Build'
          command: 'npm run dev'

      #
      - run:
          name: 'Content of composer.json'
          command: 'cat composer.json'
      - run:
          name: 'Echo app.css file content for testing...'
          command: 'cat ./public/css/app.css'

